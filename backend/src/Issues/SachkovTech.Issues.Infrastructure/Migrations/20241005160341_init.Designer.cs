// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SachkovTech.Issues.Infrastructure.DbContexts;

#nullable disable

namespace SachkovTech.Issues.Infrastructure.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    [Migration("20241005160341_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SachkovTech.Issues.Domain.Entities.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("_isDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("module_id")
                        .HasColumnType("uuid")
                        .HasColumnName("module_id");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "SachkovTech.Issues.Domain.Entities.Issue.Description#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Experience", "SachkovTech.Issues.Domain.Entities.Issue.Experience#Experience", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("experience");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("LessonId", "SachkovTech.Issues.Domain.Entities.Issue.LessonId#LessonId", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<Guid?>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("lesson_id");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Position", "SachkovTech.Issues.Domain.Entities.Issue.Position#Position", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("position");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "SachkovTech.Issues.Domain.Entities.Issue.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pk_issues");

                    b.HasIndex("module_id")
                        .HasDatabaseName("ix_issues_module_id");

                    b.ToTable("issues", (string)null);
                });

            modelBuilder.Entity("SachkovTech.Issues.Domain.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("_isDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "SachkovTech.Issues.Domain.Module.Description#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "SachkovTech.Issues.Domain.Module.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pk_modules");

                    b.ToTable("modules", (string)null);
                });

            modelBuilder.Entity("SachkovTech.Issues.Domain.Entities.Issue", b =>
                {
                    b.HasOne("SachkovTech.Issues.Domain.Module", "Module")
                        .WithMany("Issues")
                        .HasForeignKey("module_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_issues_modules_module_id");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("SachkovTech.Issues.Domain.Module", b =>
                {
                    b.Navigation("Issues");
                });
#pragma warning restore 612, 618
        }
    }
}
