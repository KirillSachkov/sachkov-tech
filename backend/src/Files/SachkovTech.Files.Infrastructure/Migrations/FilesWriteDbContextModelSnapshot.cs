// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SachkovTech.Files.Infrastructure.Database;

#nullable disable

namespace SachkovTech.Files.Infrastructure.Migrations
{
    [DbContext(typeof(FilesWriteDbContext))]
    partial class FilesWriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SachkovTech.Files.Domain.FileData", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Attributes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("attributes");

                    b.Property<bool>("IsUploaded")
                        .HasColumnType("boolean")
                        .HasColumnName("is_uploaded");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("upload_date");

                    b.ComplexProperty<Dictionary<string, object>>("FileSize", "SachkovTech.Files.Domain.FileData.FileSize#FileSize", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<long>("Value")
                                .HasColumnType("bigint")
                                .HasColumnName("file_size");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("FileType", "SachkovTech.Files.Domain.FileData.FileType#FileType", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("file_type");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("MimeType", "SachkovTech.Files.Domain.FileData.MimeType#MimeType", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("mime_type");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "SachkovTech.Files.Domain.FileData.Name#FileName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("OwnerType", "SachkovTech.Files.Domain.FileData.OwnerType#OwnerType", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("owner_type");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("StoragePath", "SachkovTech.Files.Domain.FileData.StoragePath#FilePath", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("storage_path");
                        });

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.ToTable("files", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
